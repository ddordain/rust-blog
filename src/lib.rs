use actix_web::{middleware, App, HttpServer};
use diesel::prelude::*;
use serde_derive;
use diesel::r2d2::{self, ConnectionManager};


type Pool = r2d2::Pool<ConnectionManager<SqliteConnection>>;


mod errors; //code for working with various failure scenarios
mod models; //code to define the Rust representation of our data model as represented by our database
mod routes; //code for defining the handlers that will make up the functions that get called by the framework in response to web requests 
mod schema; // autogenerated by Diesel


pub struct Blog {
    port: u16,
}


impl Blog {
    pub fn new(port: u16) -> Self {
        Blog {port}
    }


    pub fn run(&self, database_url: String) -> std::io::Result<()> {
        let manager = ConnectionManager::<SqliteConnection>::new(database_url);
        let pool = r2d2::Pool::builder()
            .build(manager)
            .expect("Failed to create pool");


        println!("Starting http server: 127.0.0.1", self.port);
        HttpServer::new(move || {
            App::new()
                .data(pool.clone())
                .wrap(middleware::Logger::default())
                .configure(routes::users::configure)
        })


        .bind(("127.0.0.1", self.port))?
        .run()
    }
}
